export class StringySet {
    constructor(collection) {
	this.set = new Set();

	collection?.forEach(elem => this.add(elem));
    }
    add(elem){
	const elemStr = JSON.stringify(elem);
	this.set.add(elemStr);
    }
    has(elem){
	const elemStr = JSON.stringify(elem);
	//console.log(elemStr, this.set)
	return this.set.has(elemStr);
    }
    forEach(callback, thisArg) {
	this.set.forEach(elemStr => {
	    const elem = JSON.parse(elemStr);
	    callback(elem, thisArg);
	});
    }
    addAll(collection) {
	collection.forEach(elem => this.add(elem));
    }
    [Symbol.iterator]() {
	return [...this.set].map(elem => JSON.parse(elem))[Symbol.iterator]();
    }
}
export class StringyDict {
    constructor({otherDict, defaultValue} = {}) {
	if (!otherDict) {this.dict = {};}
	if (!defaultValue) {this.defaultValue = null;}

	this.dict = {...otherDict};
	this.defaultValue = defaultValue;
    }
    setByKey({key, value}) {
	this.dict[JSON.stringify(key)] = value;
    }
    getByKey(key) {
	const value = this.dict[JSON.stringify(key)];
	if (!value) {return this.defaultValue;}
	return value;
    }
    getAllKeys() {
	return Object.keys(this.dict).map(elementString => JSON.parse(elementString));
    }
    deleteByKey({key}) {
	delete this.dict[JSON.stringify(key)];
    }
    toArray() {
	return this.getAllKeys().map(key => [key, this.getByKey(key)]);
    }
}
